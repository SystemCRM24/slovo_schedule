"""
Тестирование автозаполнения расписания.
Запрос приходит в виде json-строки, которая находится в query-параметре data.
Основыные моменты, которые нужно помнить:

1) Транзакционность. Если какой-то один пункт не соблюден, то занятия не проставляются.
2) По специалистам:
 - Специалист может работать на несколько подразделений
 - У специалиста может быть сколько угодно много занятий в день. Ограничено графиком работы.
 - Занятия для специалиста могут идти друг за другом без перерыва.
3) По детям:
 - Не больше 2х занятий одного типа в 1 день
 - Не больше 6 занятий в 1 день
 - Между занятиями перерыв не более 45 минут
4) По занятиям:
 - Занятия начинаются с определенной даты указанной в запросе.
 - Занятия могут делиться на несколько стадий. Это указано в запросе.
 - Стадии идут друг за другом без перерыва. Следующая стадия начинается на следующий день от конца предыдущей.
 - Стадии имеют продолжительность, которая выражена в неделях. Например, 4 недели.
 - Если занятия выходят за продолжительность стадии, то это ошибка.
 - Стадия может содержать занятия нескольких типов.
 - Помимо типа, занятия имеют атрибуты: количество и продолжительность (выражено в минутах)Занятия имеют тип,
 - Внутри одной стадии занятия разных типов можно ставить "плоско", т.е. не обязательно, что они идут друг за другом.
"""

import pytest
from src.appointplan.handler import Handler
from src.appointplan.handler.handler import ContextFiller


sample_1 = (
    '{"deal_id": "267", "user_id": "1", "start_date": "", '
    '"first_stage": {"duration": "5", '
        '"data": [{"t": "L", "q": "3", "d": "30"}, {"t": "LM", "q": "", "d": ""}, {"t": "D1-3,5", "q": "", "d": ""}, {"t": "D 3,5 ", "q": "", "d": ""}, {"t": "R", "q": "2", "d": "90"}, {"t": "ABA", "q": "2", "d": "45"}, {"t": "Z", "q": "", "d": ""}, {"t": "A", "q": "", "d": ""}, {"t": "NT", "q": "", "d": ""}, {"t": "НДГ", "q": "", "d": ""}, {"t": "NP", "q": "", "d": ""}, {"t": "P", "q": "", "d": ""}, {"t": "СИ", "q": "", "d": ""}, {"t": "КИТ", "q": "", "d": ""}, {"t": "АВА-Р", "q": "", "d": ""}, {"t": "i", "q": "", "d": ""}, {"t": "К", "q": "", "d": ""}, {"t": "d", "q": "", "d": ""}, {"t": "КК", "q": "", "d": ""}, {"t": "d-ава", "q": "", "d": ""}, {"t": "dNP", "q": "", "d": ""}, {"t": "dd", "q": "", "d": ""}, {"t": "dL", "q": "", "d": ""}, {"t": "dP", "q": "", "d": ""}]}, '
    '"second_stage": {"duration": "0", '
        '"data": [{"t": "L", "q": "", "d": ""}, {"t": "LM", "q": "", "d": ""}, {"t": "D1-3,5", "q": "", "d": ""}, {"t": "D 3,5 ", "q": "", "d": ""}, {"t": "R", "q": "", "d": ""}, {"t": "ABA", "q": "", "d": ""}, {"t": "Z", "q": "", "d": ""}, {"t": "A", "q": "", "d": ""}, {"t": "NT", "q": "", "d": ""}, {"t": "НДГ", "q": "", "d": ""}, {"t": "NP", "q": "", "d": ""}, {"t": "P", "q": "", "d": ""}, {"t": "СИ", "q": "", "d": ""}, {"t": "КИТ", "q": "", "d": ""}, {"t": "АВА-Р", "q": "", "d": ""}, {"t": "i", "q": "", "d": ""}, {"t": "К", "q": "", "d": ""}, {"t": "d", "q": "", "d": ""}, {"t": "КК", "q": "", "d": ""}, {"t": "d-ава", "q": "", "d": ""}, {"t": "dNP", "q": "", "d": ""}, {"t": "dd", "q": "", "d": ""}, {"t": "dL", "q": "", "d": ""}, {"t": "dP", "q": "", "d": ""}]}}'
)
samples = (sample_1, )


@pytest.fixture(scope='class', params=samples)
def test_handler(request):
    return Handler(request.param)


class TestHandlerContext:
    
    def test_default_attributes(self, test_handler: Handler):
        """В этом не особо много смысла, написан для пробы параметризированных фикстур."""
        assert isinstance(test_handler.request, str) and len(test_handler.request) > 0
        assert test_handler.deal is None
        assert len(test_handler.users) > 0
        assert isinstance(test_handler.stages, list) and len(test_handler.stages) == 0
        assert isinstance(test_handler.departments, dict) and len(test_handler.departments) == 0
        assert test_handler.message is None
        assert isinstance(test_handler.appointments, list) and len(test_handler.appointments) == 0

    @pytest.mark.asyncio
    async def test_context_filling(self, test_handler: Handler):
        context = ContextFiller(test_handler)
        await context.fill()
